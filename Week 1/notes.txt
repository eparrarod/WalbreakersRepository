ArrayOrder: I stated using two loops to fill out the array. But since it was too much coe I decided to do a nested loop to traverse the array. If the element found is even, go to the next one. If it is odd, then find the next even number in the array and swap them. Repeat until the end of the array or no more even numbers are found after finding an odd number.

Transpose: I had problems making my solution work because I made it in place for square matrices. It took me a few debugging attemps to realize the inputs where not always square matrices. At that point I modified it to work by creating a new matrix with the mirrored dimensions and copying the original matrix.

Flip Image: Made it inplace so that the mirroring happened at the same time as swapping the values. Too me a few tries to realize the upperbound on my second loop needs to change depending on whether the length of the rows is even or odd.


Reverse String: Effectively the same principle as mirroring the matrix.

DetectCapital : Logic to determine the usage by using a flag that changes based on the presence of uppercase and lower case. It returns false whenever it detects a change from lowercase to uppercase or a change from uppercase to lowercase beyond the first character.

Valid Palindrome: Similar to reversing but with a comparison rather than a swap. I preprocessed the string to remove non alphanumeric characters.

Self-dividing: I wrote two loops. One for extracting the digits and one for checking if the number is divisible by each digit. I then reduced the time and memory usage by adding the divisibility check to the loop that extracts the digits.

Excel Sheet column number: I made a loop that uses the index to determine the appropriate power of 26 to use for the columns. I was stuck for a while on figuring that out as I was adding an extra multiplication based on the row, which worked for inputs of size 2, but not of size 3. I didn't notice it at first because it was a multiplication for 1 on input of size 2 until it didn't work for larger inputs. 

PlusOne: I tried first doing an in place conversion of the last number and expanding the array by one. I then switched to converting the array into an integer and then back to a string but the test cases with large numbers made it too complicated so I went back to mostly inplace assition of one at the least significant digit, then snowballing the +1 whenever needed. Then if the most significant number changes to larger than 10, I create a larger array and make the appropriate copy. Lastly, I had an error where I wasnt placing the one in the correct index of the array because I used % rather than /.

Power of 2: I use a loop to go over the powers of two until it matches or excedes the value of the input.

Reverse Words: I made an in place extension of the reverse exercise. I loop through the string finding the spaces and updating the beginning and end of each word, then reverse it in place. I initially though of keeping track of the parity of spaces to find words, but realized that it was overcomplicating it because every time I found a space it means a new word needed to be reversed. Lastly, I reverse from the position the last space was found until the end of the String.

Reverse Bowels: I bassically used an in place approach. I traverse the string from right to left and from left to right using two nested loops. The outher llop traverses from right to left, and the second loop traverses from left to right. Whenever a vowel is found the inner loop would look for the next vowel from the last position it found one at. The loops stop whenever the two tracker variables meet.

FizzBuzz: Just a simple loop that checks for three % operations to determine the value to put in the array.

HammingDistance: I use an xor operation to get the binary number represented by the difference between the two numbers. I thought this would be the answer but it wasn't as it is supposed to be the number of ones on the result from the xor operation. So I converted the number to a binary String representation and counter the 1's.

Inverse: I tried using ~ but it would flip the sign bit. Thus rendering the wrong result. I decided to just convert it to a binary string and traverse the string to flip it and obtain the inverse. I realized that I don't need the actual inverse representation and just used the loop to update the new decimal representation while traversing the inverse and multiplying by the adequate powers of 2.

Single number: This one was difficult in the sense that was it not because It was classified as bitwise operations I may not have been able to remember than the XOR or a number and itself is always zero. Once I remembered that it was a matter or using xor throught the array to get the result.

Two-sum: I was doing the brute force approach. Then read that it was a Map problem. I read the suggestion on the two pass solution and implemented that one. Some of the test cases made me realize that my statement to check that it was not suppose to be not to use the same number used twice but the same element not used twice.

Anagram: I used a map for each string and then compared the key value pairs of the maps. T is an invalid anagram of S if there is a discrepancy on the counts or a missing entry from one map on the other. The comparison (mapS.get(c) != mapT.get(c)) would return false even when the counts where the same so I replaced it by (mapS.get(c) - mapT.get(c)) != 0 

Longest comon prefix(lcp): I select the shortest string as the base to look for common prefixes. I iterate over the base string checking incrementally for each substring into the other strings. If a substring appears on all the strings ans its length is larger than the current lcp. It is set as the new lcp. Initially, I forgot two things: to check the length of the common prefix, and the prefix part so I was finding the latest common substring instead.